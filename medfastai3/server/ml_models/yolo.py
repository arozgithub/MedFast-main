# -*- coding: utf-8 -*-
"""YOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aB0q7MZ1-DJpod6ex-AsxRyX7o4KBBbp

# Brain Tumor Object Detection<br>
Implementing a brain tumor detection system using YOLOv8. Curate a diverse dataset, annotate images, and train models for accurate detection. Emphasizing ethical healthcare data usage, this project seeks robust precision and recall in identifying brain tumors through the YOLOv8 along with different sizes and optimizers.

## **Data Collection**

[Dataset](https://www.kaggle.com/datasets/ammarahmed310/labeled-mri-brain-tumor-dataset)<br>
A comprehensive dataset consisting of brain scans from multiple imaging modalities, including MRI, has been chosen for the training of the YOLOv7 model. The dataset has been carefully selected to provide exposure to a wide variety of clinical situations, including cases of pituitary, meningioma, glioma, and no tumor. The dataset was obtained from Kagle and Hayatabad Medical Complex Peshawar. The specifications of the dataset, consisting of 1594 healthy brain samples, 1321 glioma, 1339 meningioma, and 1457 pituitary brain tumor samples.
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""## Importing Libraries"""

!pip install Augmentor
!pip install ultralytics

!kaggle datasets download -d ammarahmed310/labeled-mri-brain-tumor-dataset

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.patches as patches
import cv2
import math
import os
import zipfile
import random
import shutil
import Augmentor
from sklearn.model_selection import train_test_split
from ultralytics import YOLO
from PIL import Image
from IPython.display import display

from google.colab import drive
drive.mount('/content/drive')

"""## EDA"""

import zipfile

# Unzip the downloaded dataset
with zipfile.ZipFile('/content/labeled-mri-brain-tumor-dataset.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/labeled_mri_brain_tumor_dataset')

import os

# Check the contents of the dataset directory
dataset_dir = '/content/labeled_mri_brain_tumor_dataset'
os.listdir(dataset_dir)

from PIL import Image
import matplotlib.pyplot as plt

# Specify the path to the sample image
#sample_image_path = '/content/labeled_mri_brain_tumor_dataset/<folder_name>/<sample_image_name>.jpg'

# Replace <folder_name> and <sample_image_name> with actual names
# For example:
sample_image_path = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/meningioma/Tr-me_0011.jpg'

# Load and display the image
sample_image = Image.open(sample_image_path)
plt.imshow(sample_image)
plt.axis('off')  # Hide axes
plt.show()

sample_image.size

# Plotting the training data with bounding boxes
dataset_directory = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/'
class_labels = {'glioma': 0, 'meningioma': 1, 'notumor': 2, 'pituitary': 3}

fig, axes = plt.subplots(4, 4, figsize=(20, 20))

for class_name, ax_row in zip(class_labels.keys(), axes):
    class_directory = os.path.join(dataset_directory, class_name)
    image_files = [f for f in os.listdir(class_directory) if f.endswith('.jpg')]
    selected_images = random.sample(image_files, 4)

    for ax, image_file in zip(ax_row, selected_images):
        annotation_file = os.path.join(class_directory, image_file.replace('.jpg', '.txt'))
        with open(annotation_file, 'r') as file:
            line = file.readline().strip().split()
            class_number, centre_x, centre_y, height, width = map(float, line)

        img = plt.imread(os.path.join(class_directory, image_file))

        if len(img.shape) == 2:
            img = np.stack((img,) * 3, axis=-1)

        img_height, img_width, _ = img.shape
        x_min = (centre_x - width / 2) * img_width
        y_min = (centre_y - height / 2) * img_height
        x_max = (centre_x + width / 2) * img_width
        y_max = (centre_y + height / 2) * img_height
        tumor_bbox = patches.Rectangle((x_min, y_min), x_max - x_min, y_max - y_min, linewidth=2, edgecolor='r', facecolor='none', label=f'{class_name.capitalize()}')
        ax.imshow(img)
        ax.add_patch(tumor_bbox)

        label_text = f'{class_name.capitalize()}'
        ax.text((x_min + x_max) / 2, y_max + 18, label_text, color='w', ha='center', va='bottom', fontsize=9)

for ax_row in axes:
    for ax in ax_row:
        ax.axis('off')

plt.suptitle("Sample Training Data", fontsize=30)
plt.show()

class_names = ['glioma', 'meningioma', 'notumor', 'pituitary']
class_counts = [456, 551, 550, 620]

plt.bar(class_names, class_counts, width=0.5)
plt.xlabel('Class')
plt.ylabel('Number of Images')
plt.title('Number of Images in Each Class')
plt.show()

"""## Train-Test Split"""

def custom_train_test_split(dataset_directory, test_ratio=0.2, random_seed=None, min_samples_per_class=2):
    """
    Custom function to perform a stratified train-test split on an image dataset.
    This function organizes the dataset into 'train' and 'test' directories while maintaining the class-wise distribution.
    It creates the 'train' and 'test' directories within the given dataset directory and moves images accordingly.
    """
    random_seed = random_seed or 42

    class_directories = [d for d in os.listdir(dataset_directory) if os.path.isdir(os.path.join(dataset_directory, d))]

    train_directory = os.path.join(dataset_directory, 'train')
    test_directory = os.path.join(dataset_directory, 'test')
    os.makedirs(train_directory, exist_ok=True)
    os.makedirs(test_directory, exist_ok=True)

    for class_dir in class_directories:
        class_path = os.path.join(dataset_directory, class_dir)

        image_files = [f for f in os.listdir(class_path) if f.endswith('.jpg')]

        if len(image_files) < min_samples_per_class:
            continue

        train_images, test_images = train_test_split(image_files, test_size=test_ratio, random_state=random_seed)

        for train_image in train_images:
            src_image_path = os.path.join(class_path, train_image)
            src_annotation_path = os.path.join(class_path, train_image.replace('.jpg', '.txt'))

            dest_image_path = os.path.join(train_directory, class_dir, train_image)
            dest_annotation_path = os.path.join(train_directory, class_dir, train_image.replace('.jpg', '.txt'))

            os.makedirs(os.path.dirname(dest_image_path), exist_ok=True)

            if os.path.exists(src_annotation_path):
                shutil.move(src_image_path, dest_image_path)
                shutil.move(src_annotation_path, dest_annotation_path)

        for test_image in test_images:
            src_image_path = os.path.join(class_path, test_image)
            src_annotation_path = os.path.join(class_path, test_image.replace('.jpg', '.txt'))

            dest_image_path = os.path.join(test_directory, class_dir, test_image)
            dest_annotation_path = os.path.join(test_directory, class_dir, test_image.replace('.jpg', '.txt'))

            os.makedirs(os.path.dirname(dest_image_path), exist_ok=True)

            if os.path.exists(src_annotation_path):
                shutil.move(src_image_path, dest_image_path)
                shutil.move(src_annotation_path, dest_annotation_path)

dataset_directory = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset'
custom_train_test_split(dataset_directory, test_ratio=0.2, random_seed=42, min_samples_per_class=2)

def count_images_per_class(directory):
    class_counts = {}
    for class_dir in os.listdir(directory):
        class_path = os.path.join(directory, class_dir)
        if os.path.isdir(class_path):
            class_counts[class_dir] = len([f for f in os.listdir(class_path) if f.endswith('.jpg')])
    return class_counts

def plot_image_counts(train_directory, test_directory):
    """
    Plot the number of images in each class for both the training and testing sets.
    This function counts the number of images in each class for both the training and testing sets
    and plots a bar chart to visualize the distribution.
    """
    train_counts = count_images_per_class(train_directory)
    test_counts = count_images_per_class(test_directory)

    class_names = list(train_counts.keys())
    train_counts_values = list(train_counts.values())
    test_counts_values = [test_counts[class_name] for class_name in class_names]

    bar_width = 0.35
    index = range(len(class_names))

    fig, ax = plt.subplots()
    bar1 = ax.bar(index, train_counts_values, bar_width, label='Train')
    bar2 = ax.bar([i + bar_width for i in index], test_counts_values, bar_width, label='Test')

    ax.set_xlabel('Class')
    ax.set_ylabel('Number of Images')
    ax.set_title('Number of Images in Each Class for Train and Test Sets')
    ax.set_xticks([i + bar_width/2 for i in index])
    ax.set_xticklabels(class_names)
    ax.legend()

    plt.show()

dataset_directory = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/'
train_directory = os.path.join(dataset_directory, 'train')
test_directory = os.path.join(dataset_directory, 'test')

plot_image_counts(train_directory, test_directory)

"""## YOLOv8n

### Modelling
"""

yolo_btd_model = YOLO('yolov8n.yaml')

yolo_btd_model_results = yolo_btd_model.train(data='/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/brain-tumor.yaml', epochs=10)

from ultralytics import YOLO
import torch
import json
from google.colab import files


# Step 2: Define the path where the weights will be saved
weights_path = "yolo_model_weights.pth"  # This is the filename you choose

# Step 3: Save the model weights to the specified path
torch.save(yolo_btd_model.model.state_dict(), weights_path)
print(f"Model weights saved to {weights_path}")

# Step 4: Extract metrics and save training results to a JSON file
results_path = "training_results.json"

# Use the results_dict method to get a serializable dictionary
results_dict = yolo_btd_model_results.results_dict  # Extracting the results as a dictionary

# Save the results dictionary as JSON
with open(results_path, 'w') as f:
    json.dump(results_dict, f)
print(f"Training results saved to {results_path}")

# Step 5: Download the files to your PC
files.download(weights_path)
files.download(results_path)

"""### Performance Metrics"""

def plot_images(image_paths):
    fig, axes = plt.subplots(len(image_paths), 1, figsize=(80, 80))

    for i, ax in enumerate(axes):
        image_path = image_paths[i]
        img = mpimg.imread(image_path)
        ax.imshow(img)
        ax.axis('off')
        ax.set_title(os.path.basename(image_path))

    plt.tight_layout()
    plt.show()

image_paths = [
 '/content/runs/detect/train4/F1_curve.png',
    '/content/runs/detect/train4/PR_curve.png',
    '/content/runs/detect/train4/P_curve.png',
    '/content/runs/detect/train4/R_curve.png',
    '/content/runs/detect/train4/confusion_matrix.png',
    '/content/runs/detect/train4/confusion_matrix_normalized.png',
    '/content/runs/detect/train4/results.png',
]
plot_images(image_paths)

"""### Testing"""

import os
from ultralytics import YOLO

def predict_results(test_images_dir):
    model = YOLO('/content/runs/detect/train4/weights/best.pt')
    os.makedirs(output_dir, exist_ok=True)

    image_files = [f for f in os.listdir(test_images_dir) if f.lower().endswith('.jpg')]
    print(f"Found {len(image_files)} images in {test_images_dir}.")

    for image_file in image_files:
        image_path = os.path.join(test_images_dir, image_file)
        print(f"Predicting for: {image_path}")
        result = model.predict(image_path, save=True, imgsz=320, conf=0.25)
        print(f"Prediction completed for: {image_file}")

    output_files = os.listdir(output_dir)
    print(f"Files in output directory: {output_files}")

# Example usage
glioma_test_dir = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/test/glioma'

predict_results(glioma_test_dir)

meningioma_test_dir = '//content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/test/meningioma'
output_dir = '/content/predictions'  # Define where to save the predictions
predict_results(meningioma_test_dir)

notumor_test_dir = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/test/notumor'
output_dir = '/content/predictions'  # Define where to save the predictions
predict_results(notumor_test_dir)

pituitary_test_dir = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/test/pituitary'
output_dir = '/content/predictions'  # Define where to save the predictions
predict_results(pituitary_test_dir)

# Testing on video
VIDEOS_DIR = os.path.join('.', 'videos')

video_path = '/content/drive/MyDrive/brain_tumor_object_detection/data/Brain Tumor labeled dataset/test/test_video.mp4'
video_path_out = '{}_out.mp4'.format(video_path)

cap = cv2.VideoCapture(video_path)
ret, frame = cap.read()
H, W, _ = frame.shape
out = cv2.VideoWriter(video_path_out, cv2.VideoWriter_fourcc(*'MP4V'), int(cap.get(cv2.CAP_PROP_FPS)), (W, H))

threshold = 0.5

while ret:

    results = yolo_btd_model(frame)[0]

    for result in results.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = result

        if score > threshold:
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)
            cv2.putText(frame, results.names[int(class_id)].upper(), (int(x1), int(y1 - 10)),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

    out.write(frame)
    ret, frame = cap.read()

cap.release()
out.release()
cv2.destroyAllWindows()

def get_random_images_from_dir(directory, num_images=5):
    all_images = [f for f in os.listdir(directory) if f.lower().endswith('.jpg')]
    random_images = random.sample(all_images, min(num_images, len(all_images)))
    return [os.path.join(directory, img) for img in random_images]

def display_images(images, num_images_per_row=5):
    fig, axs = plt.subplots(len(images) // num_images_per_row, num_images_per_row, figsize=(30, 30))
    axs = axs.flatten()

    for i, img_path in enumerate(images):
        img = mpimg.imread(img_path)
        axs[i].imshow(img)
        axs[i].axis('off')

    plt.show()

dirs = ['/content/runs/detect/predict6/',
        '/content/runs/detect/predict7/',
        '/content/runs/detect/predict8/',
        '/content/runs/detect/predict9/']

all_images = []
for directory in dirs:
    random_images = get_random_images_from_dir(directory, num_images=5)
    all_images.extend(random_images)

display_images(all_images)

"""## YOLOv8n Adamax

### Modelling
"""

yolov8n_btd_model_adamax = YOLO('yolov8n.yaml')
yolov8n_btd_model_adamax_results = yolov8n_btd_model_adamax.train(data = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/brain-tumor.yaml',
                                                    epochs = 12,
                                                    batch = 32,
                                                    name = 'YOLOv8n_Adamax',
                                                    optimizer = 'Adamax',
                                                    lr0 = 0.001,
                                                    lrf = 0.001,
                                                    momentum = 0.85,
                                                    dropout = 0.5
                                                    )

"""### Performance Metrics"""

image_paths = [
    '/content/runs/detect/YOLOv8n_Adamax/F1_curve.png',
    '/content/runs/detect/YOLOv8n_Adamax/PR_curve.png',
    '/content/runs/detect/YOLOv8n_Adamax/P_curve.png',
    '/content/runs/detect/YOLOv8n_Adamax/R_curve.png',
    '/content/runs/detect/YOLOv8n_Adamax/confusion_matrix.png',
    '/content/runs/detect/YOLOv8n_Adamax/confusion_matrix_normalized.png',
    '/content/runs/detect/YOLOv8n_Adamax/results.png',
]

plot_images(image_paths)

"""### Testing"""

def predict_results_on_YOLOv8n_Adamax(test_images_dir):
    model = YOLO('/content/runs/detect/YOLOv8n_Adamax/weights/best.pt')

    image_files = [f for f in os.listdir(test_images_dir) if f.lower().endswith('.jpg')]

    for image_file in image_files:
        image_path = os.path.join(test_images_dir, image_file)
        model.predict(image_path, save=True, imgsz=512, conf=0.25)#conf=0.3

test_dir = '/content/labeled_mri_brain_tumor_dataset/Brain Tumor labeled dataset/test/glioma'
predict_results_on_YOLOv8n_Adamax(test_dir)

def display_images(images, num_images_per_row=5):
    fig, axs = plt.subplots(len(images) // num_images_per_row, num_images_per_row, figsize=(30, 30))
    axs = axs.flatten()

    for i, img_path in enumerate(images):
        img = mpimg.imread(img_path)
        axs[i].imshow(img)
        axs[i].axis('off')

    plt.show()

def get_random_images_from_dir(directory, num_images=5):
    all_images = [f for f in os.listdir(directory) if f.lower().endswith('.jpg')]
    random_images = random.sample(all_images, min(num_images, len(all_images)))
    return [os.path.join(directory, img) for img in random_images]

random_images = get_random_images_from_dir('/content/runs/detect/predict12/', 20)
display_images(random_images)

"""## YOLOv8m RMSProp

### Modelling
"""

yolov8m_btd_model = YOLO('yolov8m.yaml')
yolov8m_btd_model_results = yolov8m_btd_model.train(data = '/content/drive/MyDrive/brain_tumor_object_detection/brain_tumor_dataset.yaml',
                                                    epochs = 30,
                                                    batch = 32,
                                                    name = 'YOLOv8m',
                                                    optimizer = 'RMSProp',
                                                    lr0 = 0.001,
                                                    lrf = 0.001,
                                                    momentum = 0.90,
                                                    dropout = 0.2
                                                    )

"""### Performance Metrics"""

image_paths = [
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/F1_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/PR_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/P_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/R_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/confusion_matrix.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/confusion_matrix_normalized.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/results.png',
]
plot_images(image_paths)

"""### Testing"""

def predict_results_on_YOLOv8m(test_images_dir):
    model = YOLO('/content/drive/MyDrive/brain_tumor_object_detection/yolov8m/detect/YOLOv8m5/weights/best.pt')
    # os.makedirs(output_dir, exist_ok=True)

    image_files = [f for f in os.listdir(test_images_dir) if f.lower().endswith('.jpg')]

    for image_file in image_files:
        image_path = os.path.join(test_images_dir, image_file)
        model.predict(image_path, save=True, imgsz=512, conf=0.3)

predict_results_on_YOLOv8m('/content/drive/MyDrive/brain_tumor_object_detection/data/Brain Tumor labeled dataset/test_images')

def get_random_images_from_dir(directory, num_images=5):
    all_images = [f for f in os.listdir(directory) if f.lower().endswith('.jpg')]
    random_images = random.sample(all_images, min(num_images, len(all_images)))
    return [os.path.join(directory, img) for img in random_images]

def display_images(images, num_images_per_row=5):
    fig, axs = plt.subplots(len(images) // num_images_per_row, num_images_per_row, figsize=(30, 30))
    axs = axs.flatten()

    for i, img_path in enumerate(images):
        img = mpimg.imread(img_path)
        axs[i].imshow(img)
        axs[i].axis('off')

    plt.show()

random_images = get_random_images_from_dir('/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_test_reults/detect/predict', 20)
display_images(random_images)

"""## YOLOv8m Adam

### Modelling
"""

yolov8m_btd_model_optimized = YOLO('yolov8m.yaml')
yolov8m_btd_model_optimized_results = yolov8m_btd_model_optimized.train(data = '/content/drive/MyDrive/brain_tumor_object_detection/brain_tumor_dataset.yaml',
                                                    epochs = 30,
                                                    batch = 32,
                                                    name = 'YOLOv8m',
                                                    optimizer = 'Adam',
                                                    lr0 = 0.001,
                                                    lrf = 0.001,
                                                    momentum = 0.90,
                                                    dropout = 0.3
                                                    )

test_dir = '/content/drive/MyDrive/brain_tumor_object_detection/data/Brain Tumor labeled dataset/test_images'
predict_results_on_YOLOv8m(test_dir)

"""### Performance Metrics"""

image_paths = [
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/F1_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/PR_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/P_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/R_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/confusion_matrix.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/confusion_matrix_normalized.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/results.png',
]
plot_images(image_paths)

"""### Testing"""

def predict_results_on_YOLOv8m_Adam(test_images_dir):
    model = YOLO('/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adam/detect/YOLOv8m/weights/best.pt')
    # os.makedirs(output_dir, exist_ok=True)

    image_files = [f for f in os.listdir(test_images_dir) if f.lower().endswith('.jpg')]

    for image_file in image_files:
        image_path = os.path.join(test_images_dir, image_file)
        model.predict(image_path, save=True, imgsz=512, conf=0.3)

test_dir = '/content/drive/MyDrive/brain_tumor_object_detection/data/Brain Tumor labeled dataset/test_images'
predict_results_on_YOLOv8m_Adam(test_dir)

def display_images(images, num_images_per_row=5):
    fig, axs = plt.subplots(len(images) // num_images_per_row, num_images_per_row, figsize=(30, 30))
    axs = axs.flatten()

    for i, img_path in enumerate(images):
        img = mpimg.imread(img_path)
        axs[i].imshow(img)
        axs[i].axis('off')

    plt.show()

def get_random_images_from_dir(directory, num_images=5):
    all_images = [f for f in os.listdir(directory) if f.lower().endswith('.jpg')]
    random_images = random.sample(all_images, min(num_images, len(all_images)))
    return [os.path.join(directory, img) for img in random_images]

random_images = get_random_images_from_dir('/content/drive/MyDrive/brain_tumor_object_detection/YOLOv8_Adam_test_reults/detect/predict2', 20)
display_images(random_images)

"""## YOLOv8m Adamax

### Modelling
"""

yolov8m_btd_model_adamax = YOLO('yolov8m.yaml')
yolov8m_btd_model_adamax_results = yolov8m_btd_model_adamax.train(data = '/content/drive/MyDrive/brain_tumor_object_detection/brain_tumor_dataset.yaml',
                                                    epochs = 30,
                                                    batch = 32,
                                                    name = 'YOLOv8m_Adamax',
                                                    optimizer = 'Adamax',
                                                    lr0 = 0.001,
                                                    lrf = 0.001,
                                                    momentum = 0.89,
                                                    dropout = 0.4
                                                    )

"""### Performance Metrics"""

image_paths = [
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/F1_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/PR_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/P_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/R_curve.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/confusion_matrix.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/confusion_matrix_normalized.png',
    '/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/results.png',
]
plot_images(image_paths)

"""### Testing"""

def predict_results_on_YOLOv8m_Adam(test_images_dir):
    model = YOLO('/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax/detect/YOLOv8m_Adamax/weights/best.pt')

    image_files = [f for f in os.listdir(test_images_dir) if f.lower().endswith('.jpg')]

    for image_file in image_files:
        image_path = os.path.join(test_images_dir, image_file)
        model.predict(image_path, save=True, imgsz=512, conf=0.3)

test_dir = '/content/drive/MyDrive/brain_tumor_object_detection/data/Brain Tumor labeled dataset/test_images'
predict_results_on_YOLOv8m_Adam(test_dir)

def display_images(images, num_images_per_row=5):
    fig, axs = plt.subplots(len(images) // num_images_per_row, num_images_per_row, figsize=(30, 30))
    axs = axs.flatten()

    for i, img_path in enumerate(images):
        img = mpimg.imread(img_path)
        axs[i].imshow(img)
        axs[i].axis('off')

    plt.show()

def get_random_images_from_dir(directory, num_images=5):
    all_images = [f for f in os.listdir(directory) if f.lower().endswith('.jpg')]
    random_images = random.sample(all_images, min(num_images, len(all_images)))
    return [os.path.join(directory, img) for img in random_images]

random_images = get_random_images_from_dir('/content/drive/MyDrive/brain_tumor_object_detection/yolov8m_Adamax_test_results/detect/predict', 20)
display_images(random_images)

